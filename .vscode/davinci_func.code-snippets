{
	// Place your Hedge2Davinci workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Davinci python func":{
		"scope": "python",
		"prefix": "ded",
		"body": ["def ${2:method_name}(self,$5${3:arg1}$6) -> ${4:ReturnType}:",
				"    return self._$TM_FILENAME_BASE.${2/_([a-z])|^([a-z])/${1:/upcase}${2:/upcase}/gm}($3)"
		],
		"description": "davinci python func"
	},
	"Davinci python func(return class)":{
		"scope": "python",
		"prefix": "dedc",
		"body": ["def ${2:method_name}(self,$5${3:arg1}) -> ${4:ReturnType}:",
				"    return $4(self._$TM_FILENAME_BASE.${2/_([a-z])|^([a-z])/${1:/upcase}${2:/upcase}/gm}($3))"
		],
		"description": "davinci python func (return class)"
	},
	"Davinci python func(return class list)":{
		"scope": "python",
		"prefix": "dedcl",
		"body": ["def ${2:method_name}(self,$5${3:arg1}) -> List[${4:ReturnType}]:",
				"    ${6:return_list_name} = list()",
				"    for ${7:value} in self._$TM_FILENAME_BASE.${2/_([a-z])|^([a-z])/${1:/upcase}${2:/upcase}/gm}($3):",
				"        $6.append($4($7))",
				"    return $6"
			],	
		"description": "davinci python func (return class)"
	},
	"Module RST":{
		"prefix":"mr",
		"body":[
				"${TM_FILENAME_BASE/(.*\\.|_)([a-z])/${2:/upcase}/gm}",
				"==========================================",
				"",
				".. automodule:: ${TM_FILENAME_BASE}",
				"   :members:",
				"   :undoc-members:",
				"   :show-inheritance:",
		]
	},
	"Class RST":{
		"prefix":"cr",
		"body":[
				"${TM_FILENAME_BASE/(.*\\.|_)([a-z])/${2:/upcase}/gm}",
				"==========================================",
				"",
				".. currentmodule:: ${TM_FILENAME_BASE/(.*)\\..*/${1}/gm} ",
				"",
				".. autoclass:: ${TM_FILENAME_BASE/.*\\.(.*)/${1}/gm}",
				"   :members:",
				"   :special-members:",
				"   :show-inheritance:",
		]
	}

}
